{"ast":null,"code":"var _jsxFileName = \"/Users/geraldobuseh/react-apps/react-weather-app/src/components/search/search.js\",\n  _s = $RefreshSig$();\nimport { useState } from \"react\";\nimport { AsyncPaginate } from \"react-select-async-paginate\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Search = ({\n  onSearchChange\n}) => {\n  _s();\n  const [search, setSearch] = useState(null);\n  const loadOptions = async inputValue => {\n    const url = `https://wft-geo-db.p.rapidapi.com/v1/geo/cities?minPopulation=250000&namePrefix=${inputValue}`;\n    const options = {\n      method: 'GET',\n      headers: {\n        'x-rapidapi-key': '84a12cdb04msh1e80c83b3092fc2p157f01jsn39d73bc4782c',\n        'x-rapidapi-host': 'wft-geo-db.p.rapidapi.com'\n      }\n    };\n    try {\n      // 1. Fetch the data\n      const response = await fetch(url, options);\n\n      // 2. Check if the request was successful\n      if (!response.ok) {\n        throw new Error(`HTTP Error! Status: ${response.status}`);\n      }\n\n      // 3. Parse the response JSON\n      const result = await response.json();\n\n      // 4. Transform data into the format { options: [{ label, value }] }\n      return {\n        options: result.data.map(city => ({\n          label: `${city.name}, ${city.countryCode}`,\n          // e.g., \"New York, US\"\n          value: `${city.latitude}, ${city.longitude}` // city ID as value\n        }))\n      };\n    } catch (error) {\n      // Handle any errors\n      console.error('Error fetching cities:', error);\n      return {\n        options: [] // Return empty options if there's an error\n      };\n    }\n  };\n  const handleOnChange = searchData => {\n    setSearch(searchData);\n    onSearchChange(searchData);\n  };\n  return /*#__PURE__*/_jsxDEV(AsyncPaginate, {\n    placeholder: \"Search for City\",\n    debounceTimeout: 600,\n    value: search,\n    onChange: handleOnChange,\n    loadOptions: loadOptions\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 9\n  }, this);\n};\n_s(Search, \"rZ+0pF47En10nDqJpRK7x4d9dB0=\");\n_c = Search;\nexport default Search;\nvar _c;\n$RefreshReg$(_c, \"Search\");","map":{"version":3,"names":["useState","AsyncPaginate","jsxDEV","_jsxDEV","Search","onSearchChange","_s","search","setSearch","loadOptions","inputValue","url","options","method","headers","response","fetch","ok","Error","status","result","json","data","map","city","label","name","countryCode","value","latitude","longitude","error","console","handleOnChange","searchData","placeholder","debounceTimeout","onChange","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/geraldobuseh/react-apps/react-weather-app/src/components/search/search.js"],"sourcesContent":["import { useState } from \"react\";\nimport { AsyncPaginate } from \"react-select-async-paginate\";\n\nconst Search = ({onSearchChange}) => \n{\n\n    const [search, setSearch] = useState(null);\n\n    \n    const loadOptions = async (inputValue) => {\n        const url = `https://wft-geo-db.p.rapidapi.com/v1/geo/cities?minPopulation=250000&namePrefix=${inputValue}`;\n    \n        const options = {\n            method: 'GET',\n            headers: {\n                'x-rapidapi-key': '84a12cdb04msh1e80c83b3092fc2p157f01jsn39d73bc4782c',\n                'x-rapidapi-host': 'wft-geo-db.p.rapidapi.com',\n            },\n        };\n    \n        try {\n            // 1. Fetch the data\n            const response = await fetch(url, options);\n            \n            // 2. Check if the request was successful\n            if (!response.ok) {\n                throw new Error(`HTTP Error! Status: ${response.status}`);\n            }\n    \n            // 3. Parse the response JSON\n            const result = await response.json();\n    \n            // 4. Transform data into the format { options: [{ label, value }] }\n            return {\n                options: result.data.map((city) => ({\n                    label: `${city.name}, ${city.countryCode}`, // e.g., \"New York, US\"\n                    value: `${city.latitude}, ${city.longitude}`, // city ID as value\n                })),\n            };\n        } catch (error) {\n            // Handle any errors\n            console.error('Error fetching cities:', error);\n            return {\n                options: [], // Return empty options if there's an error\n            };\n        }\n    };\n    \n    const handleOnChange = (searchData) => {\n        setSearch(searchData);\n        onSearchChange(searchData)\n    }\n    return (\n        <AsyncPaginate\n            placeholder=\"Search for City\"\n            debounceTimeout={600}\n            value={search}\n            onChange={handleOnChange}\n            loadOptions={loadOptions}\n        />\n    )\n}\n\nexport default Search; "],"mappings":";;AAAA,SAASA,QAAQ,QAAQ,OAAO;AAChC,SAASC,aAAa,QAAQ,6BAA6B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE5D,MAAMC,MAAM,GAAGA,CAAC;EAACC;AAAc,CAAC,KAChC;EAAAC,EAAA;EAEI,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGR,QAAQ,CAAC,IAAI,CAAC;EAG1C,MAAMS,WAAW,GAAG,MAAOC,UAAU,IAAK;IACtC,MAAMC,GAAG,GAAG,mFAAmFD,UAAU,EAAE;IAE3G,MAAME,OAAO,GAAG;MACZC,MAAM,EAAE,KAAK;MACbC,OAAO,EAAE;QACL,gBAAgB,EAAE,oDAAoD;QACtE,iBAAiB,EAAE;MACvB;IACJ,CAAC;IAED,IAAI;MACA;MACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAACL,GAAG,EAAEC,OAAO,CAAC;;MAE1C;MACA,IAAI,CAACG,QAAQ,CAACE,EAAE,EAAE;QACd,MAAM,IAAIC,KAAK,CAAC,uBAAuBH,QAAQ,CAACI,MAAM,EAAE,CAAC;MAC7D;;MAEA;MACA,MAAMC,MAAM,GAAG,MAAML,QAAQ,CAACM,IAAI,CAAC,CAAC;;MAEpC;MACA,OAAO;QACHT,OAAO,EAAEQ,MAAM,CAACE,IAAI,CAACC,GAAG,CAAEC,IAAI,KAAM;UAChCC,KAAK,EAAE,GAAGD,IAAI,CAACE,IAAI,KAAKF,IAAI,CAACG,WAAW,EAAE;UAAE;UAC5CC,KAAK,EAAE,GAAGJ,IAAI,CAACK,QAAQ,KAAKL,IAAI,CAACM,SAAS,EAAE,CAAE;QAClD,CAAC,CAAC;MACN,CAAC;IACL,CAAC,CAAC,OAAOC,KAAK,EAAE;MACZ;MACAC,OAAO,CAACD,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;MAC9C,OAAO;QACHnB,OAAO,EAAE,EAAE,CAAE;MACjB,CAAC;IACL;EACJ,CAAC;EAED,MAAMqB,cAAc,GAAIC,UAAU,IAAK;IACnC1B,SAAS,CAAC0B,UAAU,CAAC;IACrB7B,cAAc,CAAC6B,UAAU,CAAC;EAC9B,CAAC;EACD,oBACI/B,OAAA,CAACF,aAAa;IACVkC,WAAW,EAAC,iBAAiB;IAC7BC,eAAe,EAAE,GAAI;IACrBR,KAAK,EAAErB,MAAO;IACd8B,QAAQ,EAAEJ,cAAe;IACzBxB,WAAW,EAAEA;EAAY;IAAA6B,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC5B,CAAC;AAEV,CAAC;AAAAnC,EAAA,CA1DKF,MAAM;AAAAsC,EAAA,GAANtC,MAAM;AA4DZ,eAAeA,MAAM;AAAC,IAAAsC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}