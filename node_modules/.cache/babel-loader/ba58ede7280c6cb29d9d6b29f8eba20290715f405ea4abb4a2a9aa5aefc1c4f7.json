{"ast":null,"code":"var _jsxFileName = \"/Users/geraldobuseh/react-apps/react-weather-app/src/App.js\",\n  _s = $RefreshSig$();\nimport './App.css';\nimport Search from './components/search/search';\nimport CurrentWeather from './components/current-weather/current-weather';\nimport Forecast from './components/forecast/forecast';\nimport { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [currentWeather, setCurrentWeather] = useState(null);\n  const [forecast, setForecast] = useState(null);\n  const handleOnSearchChange = searchData => {\n    // Extract latitude and longitude from the selected city (splitting by the comma and trimming any extra spaces)\n    const [latitude, longitude] = searchData.value.split(\",\").map(coord => coord.trim());\n\n    // Ensure the latitude and longitude are valid numbers\n    if (!isNaN(latitude) && !isNaN(longitude)) {\n      const currentWeatherFetch = fetch(`https://api.openweathermap.org/data/2.5/weather?lat=${latitude}&lon=${longitude}&appid=c8e9c117a04ee89379b6d3352ee513fd&units=metric`);\n      const forecastFetch = fetch(`https://api.openweathermap.org/data/2.5/forecast?lat=${latitude}&lon=${longitude}&appid=c8e9c117a04ee89379b6d3352ee513fd&units=metric`);\n      Promise.all([currentWeatherFetch, forecastFetch]).then(async response => {\n        const weatherResponse = await response[0].json();\n        const forecastResponse = await response[1].json();\n\n        // Store weather and forecast data in state\n        setCurrentWeather({\n          city: searchData.label,\n          ...weatherResponse\n        });\n        setForecast({\n          city: searchData.label,\n          ...forecastResponse\n        });\n      }).catch(err => console.log(err));\n    } else {\n      console.error(\"Invalid latitude or longitude values.\");\n    }\n  };\n  console.log(currentWeather);\n  console.log(forecast);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(Search, {\n      onSearchChange: handleOnSearchChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this), currentWeather && /*#__PURE__*/_jsxDEV(CurrentWeather, {\n      data: currentWeather\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 26\n    }, this), forecast && /*#__PURE__*/_jsxDEV(Forecast, {\n      data: forecast\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 20\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      class: \"copyright\",\n      children: \"2024 Gerald Obuseh\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"WWp4biUQ6yxZ26omAvrL3l/oQ6o=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["Search","CurrentWeather","Forecast","useState","jsxDEV","_jsxDEV","App","_s","currentWeather","setCurrentWeather","forecast","setForecast","handleOnSearchChange","searchData","latitude","longitude","value","split","map","coord","trim","isNaN","currentWeatherFetch","fetch","forecastFetch","Promise","all","then","response","weatherResponse","json","forecastResponse","city","label","catch","err","console","log","error","className","children","onSearchChange","fileName","_jsxFileName","lineNumber","columnNumber","data","class","_c","$RefreshReg$"],"sources":["/Users/geraldobuseh/react-apps/react-weather-app/src/App.js"],"sourcesContent":["import './App.css';\nimport Search from './components/search/search';\nimport CurrentWeather from './components/current-weather/current-weather';\nimport Forecast from './components/forecast/forecast';\nimport { useState } from 'react';\n\n\nfunction App() {\n\n  const [currentWeather, setCurrentWeather] = useState(null);\n\n  const [forecast, setForecast] = useState(null);\n\n\n\n  const handleOnSearchChange = (searchData) => {\n    // Extract latitude and longitude from the selected city (splitting by the comma and trimming any extra spaces)\n    const [latitude, longitude] = searchData.value.split(\",\").map(coord => coord.trim());\n  \n    // Ensure the latitude and longitude are valid numbers\n    if (!isNaN(latitude) && !isNaN(longitude)) {\n  \n      const currentWeatherFetch = fetch(\n        `https://api.openweathermap.org/data/2.5/weather?lat=${latitude}&lon=${longitude}&appid=c8e9c117a04ee89379b6d3352ee513fd&units=metric`\n      );\n  \n      const forecastFetch = fetch(\n        `https://api.openweathermap.org/data/2.5/forecast?lat=${latitude}&lon=${longitude}&appid=c8e9c117a04ee89379b6d3352ee513fd&units=metric`\n      );\n  \n      Promise.all([currentWeatherFetch, forecastFetch])\n        .then(async (response) => {\n          const weatherResponse = await response[0].json();\n          const forecastResponse = await response[1].json();\n  \n          // Store weather and forecast data in state\n          setCurrentWeather({ city: searchData.label, ...weatherResponse });\n          setForecast({ city: searchData.label, ...forecastResponse });\n        })\n        .catch((err) => console.log(err));\n    } else {\n      console.error(\"Invalid latitude or longitude values.\");\n    }\n  };\n\n\n  console.log(currentWeather);\n  console.log(forecast);\n\n\n  return (\n    <div className=\"container\">\n      <Search onSearchChange = {handleOnSearchChange} />\n      {currentWeather && <CurrentWeather data={currentWeather} />}\n      {forecast && <Forecast data={forecast} />}\n      <p class=\"copyright\">\n             2024 Gerald Obuseh\n    </p>\n    </div>\n    \n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}