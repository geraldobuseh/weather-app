{"ast":null,"code":"import{useState}from\"react\";import{AsyncPaginate}from\"react-select-async-paginate\";import{jsx as _jsx}from\"react/jsx-runtime\";const Search=_ref=>{let{onSearchChange}=_ref;const[search,setSearch]=useState(null);const loadOptions=async inputValue=>{const url=`https://wft-geo-db.p.rapidapi.com/v1/geo/cities?minPopulation=250000&namePrefix=${inputValue}`;const options={method:'GET',headers:{'x-rapidapi-key':'84a12cdb04msh1e80c83b3092fc2p157f01jsn39d73bc4782c','x-rapidapi-host':'wft-geo-db.p.rapidapi.com'}};try{// 1. Fetch the data\nconst response=await fetch(url,options);// 2. Check if the request was successful\nif(!response.ok){throw new Error(`HTTP Error! Status: ${response.status}`);}// 3. Parse the response JSON\nconst result=await response.json();// 4. Transform data into the format { options: [{ label, value }] }\nreturn{options:result.data.map(city=>({label:`${city.name}, ${city.countryCode}`,// e.g., \"New York, US\"\nvalue:`${city.latitude}, ${city.longitude}`// city ID as value\n}))};}catch(error){// Handle any errors\nconsole.error('Error fetching cities:',error);return{options:[]// Return empty options if there's an error\n};}};const handleOnChange=searchData=>{setSearch(searchData);onSearchChange(searchData);};return/*#__PURE__*/_jsx(AsyncPaginate,{placeholder:\"Search for City\",debounceTimeout:600,value:search,onChange:handleOnChange,loadOptions:loadOptions});};export default Search;","map":{"version":3,"names":["useState","AsyncPaginate","jsx","_jsx","Search","_ref","onSearchChange","search","setSearch","loadOptions","inputValue","url","options","method","headers","response","fetch","ok","Error","status","result","json","data","map","city","label","name","countryCode","value","latitude","longitude","error","console","handleOnChange","searchData","placeholder","debounceTimeout","onChange"],"sources":["/Users/geraldobuseh/react-apps/react-weather-app/src/components/search/search.js"],"sourcesContent":["import { useState } from \"react\";\nimport { AsyncPaginate } from \"react-select-async-paginate\";\n\nconst Search = ({onSearchChange}) => \n{\n\n    const [search, setSearch] = useState(null);\n\n    \n    const loadOptions = async (inputValue) => {\n        const url = `https://wft-geo-db.p.rapidapi.com/v1/geo/cities?minPopulation=250000&namePrefix=${inputValue}`;\n    \n        const options = {\n            method: 'GET',\n            headers: {\n                'x-rapidapi-key': '84a12cdb04msh1e80c83b3092fc2p157f01jsn39d73bc4782c',\n                'x-rapidapi-host': 'wft-geo-db.p.rapidapi.com',\n            },\n        };\n    \n        try {\n            // 1. Fetch the data\n            const response = await fetch(url, options);\n            \n            // 2. Check if the request was successful\n            if (!response.ok) {\n                throw new Error(`HTTP Error! Status: ${response.status}`);\n            }\n    \n            // 3. Parse the response JSON\n            const result = await response.json();\n    \n            // 4. Transform data into the format { options: [{ label, value }] }\n            return {\n                options: result.data.map((city) => ({\n                    label: `${city.name}, ${city.countryCode}`, // e.g., \"New York, US\"\n                    value: `${city.latitude}, ${city.longitude}`, // city ID as value\n                })),\n            };\n        } catch (error) {\n            // Handle any errors\n            console.error('Error fetching cities:', error);\n            return {\n                options: [], // Return empty options if there's an error\n            };\n        }\n    };\n    \n    const handleOnChange = (searchData) => {\n        setSearch(searchData);\n        onSearchChange(searchData)\n    }\n    return (\n        <AsyncPaginate\n            placeholder=\"Search for City\"\n            debounceTimeout={600}\n            value={search}\n            onChange={handleOnChange}\n            loadOptions={loadOptions}\n        />\n    )\n}\n\nexport default Search; "],"mappings":"AAAA,OAASA,QAAQ,KAAQ,OAAO,CAChC,OAASC,aAAa,KAAQ,6BAA6B,CAAC,OAAAC,GAAA,IAAAC,IAAA,yBAE5D,KAAM,CAAAC,MAAM,CAAGC,IAAA,EACf,IADgB,CAACC,cAAc,CAAC,CAAAD,IAAA,CAG5B,KAAM,CAACE,MAAM,CAAEC,SAAS,CAAC,CAAGR,QAAQ,CAAC,IAAI,CAAC,CAG1C,KAAM,CAAAS,WAAW,CAAG,KAAO,CAAAC,UAAU,EAAK,CACtC,KAAM,CAAAC,GAAG,CAAG,mFAAmFD,UAAU,EAAE,CAE3G,KAAM,CAAAE,OAAO,CAAG,CACZC,MAAM,CAAE,KAAK,CACbC,OAAO,CAAE,CACL,gBAAgB,CAAE,oDAAoD,CACtE,iBAAiB,CAAE,2BACvB,CACJ,CAAC,CAED,GAAI,CACA;AACA,KAAM,CAAAC,QAAQ,CAAG,KAAM,CAAAC,KAAK,CAACL,GAAG,CAAEC,OAAO,CAAC,CAE1C;AACA,GAAI,CAACG,QAAQ,CAACE,EAAE,CAAE,CACd,KAAM,IAAI,CAAAC,KAAK,CAAC,uBAAuBH,QAAQ,CAACI,MAAM,EAAE,CAAC,CAC7D,CAEA;AACA,KAAM,CAAAC,MAAM,CAAG,KAAM,CAAAL,QAAQ,CAACM,IAAI,CAAC,CAAC,CAEpC;AACA,MAAO,CACHT,OAAO,CAAEQ,MAAM,CAACE,IAAI,CAACC,GAAG,CAAEC,IAAI,GAAM,CAChCC,KAAK,CAAE,GAAGD,IAAI,CAACE,IAAI,KAAKF,IAAI,CAACG,WAAW,EAAE,CAAE;AAC5CC,KAAK,CAAE,GAAGJ,IAAI,CAACK,QAAQ,KAAKL,IAAI,CAACM,SAAS,EAAI;AAClD,CAAC,CAAC,CACN,CAAC,CACL,CAAE,MAAOC,KAAK,CAAE,CACZ;AACAC,OAAO,CAACD,KAAK,CAAC,wBAAwB,CAAEA,KAAK,CAAC,CAC9C,MAAO,CACHnB,OAAO,CAAE,EAAI;AACjB,CAAC,CACL,CACJ,CAAC,CAED,KAAM,CAAAqB,cAAc,CAAIC,UAAU,EAAK,CACnC1B,SAAS,CAAC0B,UAAU,CAAC,CACrB5B,cAAc,CAAC4B,UAAU,CAAC,CAC9B,CAAC,CACD,mBACI/B,IAAA,CAACF,aAAa,EACVkC,WAAW,CAAC,iBAAiB,CAC7BC,eAAe,CAAE,GAAI,CACrBR,KAAK,CAAErB,MAAO,CACd8B,QAAQ,CAAEJ,cAAe,CACzBxB,WAAW,CAAEA,WAAY,CAC5B,CAAC,CAEV,CAAC,CAED,cAAe,CAAAL,MAAM","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}